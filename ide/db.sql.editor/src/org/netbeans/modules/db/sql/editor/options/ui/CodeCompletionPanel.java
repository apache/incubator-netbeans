/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.db.sql.editor.options.ui;

import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;
import javax.swing.JComponent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.options.editor.spi.PreferencesCustomizer;
import org.openide.util.HelpCtx;

/**
 *
 * @author Arthur Sadykov
 */
public class CodeCompletionPanel extends javax.swing.JPanel  {

    public static final String SQL_COMPLETION_AUTOPOPUP_WINDOW = "sqlCompletionAutoPopupWindow"; //NOI18N
    public static final String SQL_AUTOPOPUP_TRIGGERS = "sqlAutoPopupTriggers"; //NOI18N
    public static final String DEFAULT_AUTOPOPUP_TRIGGERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; //NOI18N
    private final Preferences preferences;
    private final Map<String, Object> id2Saved = new HashMap<>();

    private CodeCompletionPanel(Preferences preferences) {
        this.preferences = preferences;
        initComponents();
        autoPopupTriggersTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                preferences.put(SQL_AUTOPOPUP_TRIGGERS, autoPopupTriggersTextField.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                preferences.put(SQL_AUTOPOPUP_TRIGGERS, autoPopupTriggersTextField.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                preferences.put(SQL_AUTOPOPUP_TRIGGERS, autoPopupTriggersTextField.getText());
            }
        });
        autoPopupCompletionWindowCheckBox.setSelected(preferences.getBoolean(SQL_COMPLETION_AUTOPOPUP_WINDOW, true));
        autoPopupTriggersTextField.setText(preferences.get(SQL_AUTOPOPUP_TRIGGERS, DEFAULT_AUTOPOPUP_TRIGGERS));
        id2Saved.put(SQL_COMPLETION_AUTOPOPUP_WINDOW, autoPopupCompletionWindowCheckBox.isSelected());
        id2Saved.put(SQL_AUTOPOPUP_TRIGGERS, autoPopupTriggersTextField.getText());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoPopupCompletionWindowCheckBox = new javax.swing.JCheckBox();
        autoPopupTriggersLabel = new javax.swing.JLabel();
        autoPopupTriggersTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(autoPopupCompletionWindowCheckBox, org.openide.util.NbBundle.getMessage(CodeCompletionPanel.class, "CodeCompletionPanel.autoPopupCompletionWindowCheckBox.text")); // NOI18N
        autoPopupCompletionWindowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPopupCompletionWindowCheckBoxActionPerformed(evt);
            }
        });

        autoPopupTriggersLabel.setLabelFor(autoPopupTriggersTextField);
        org.openide.awt.Mnemonics.setLocalizedText(autoPopupTriggersLabel, org.openide.util.NbBundle.getMessage(CodeCompletionPanel.class, "CodeCompletionPanel.autoPopupTriggersLabel.text")); // NOI18N

        autoPopupTriggersTextField.setMaximumSize(new java.awt.Dimension(80, 22));
        autoPopupTriggersTextField.setMinimumSize(new java.awt.Dimension(80, 22));
        autoPopupTriggersTextField.setPreferredSize(new java.awt.Dimension(80, 22));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(autoPopupCompletionWindowCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(autoPopupTriggersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoPopupTriggersTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoPopupCompletionWindowCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoPopupTriggersLabel)
                    .addComponent(autoPopupTriggersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void autoPopupCompletionWindowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPopupCompletionWindowCheckBoxActionPerformed
        preferences.putBoolean(SQL_COMPLETION_AUTOPOPUP_WINDOW, autoPopupCompletionWindowCheckBox.isSelected());
    }//GEN-LAST:event_autoPopupCompletionWindowCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoPopupCompletionWindowCheckBox;
    private javax.swing.JLabel autoPopupTriggersLabel;
    private javax.swing.JTextField autoPopupTriggersTextField;
    // End of variables declaration//GEN-END:variables

    public static PreferencesCustomizer.Factory getCustomizerFactory() {
        return CodeCompletionPreferencesCustomizer::new;
    }

    private String getSavedValue(String key) {
        return id2Saved.get(key).toString();
    }

    private static class CodeCompletionPreferencesCustomizer implements PreferencesCustomizer {

        private static final String CUSTOMIZER_ID = "sqlCodeCompletionPreferencesCustomizer"; //NOI18N
        private static final String CUSTOMIZER_NAME = "SQL Code Completion Preferences Customizer"; //NOI18N
        private final Preferences preferences;
        private CodeCompletionPanel component;

        private CodeCompletionPreferencesCustomizer(Preferences preferences) {
            this.preferences = preferences;
        }

        @Override
        public String getId() {
            return CUSTOMIZER_ID;
        }

        @Override
        public String getDisplayName() {
            return CUSTOMIZER_NAME;
        }

        @Override
        public HelpCtx getHelpCtx() {
            return new HelpCtx("netbeans.optionsDialog.editor.codeCompletion.java"); //NOI18N
        }

        @Override
        public JComponent getComponent() {
            if (component == null) {
                component = new CodeCompletionPanel(preferences);
            }
            return component;
        }
    }

    public static final class CustomCustomizerImpl extends PreferencesCustomizer.CustomCustomizer {

        @Override
        public String getSavedValue(PreferencesCustomizer customCustomizer, String key) {
            if (customCustomizer instanceof CodeCompletionPreferencesCustomizer) {
                return ((CodeCompletionPanel) customCustomizer.getComponent()).getSavedValue(key);
            }
            return null;
        }
    }
}
