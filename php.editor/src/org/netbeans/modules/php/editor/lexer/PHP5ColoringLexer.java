/* The following code was generated by JFlex 1.4.3 on 17/05/01 14:58 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/01 14:58 from the specification file
 * <tt>/home/junichi11/hg/web-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 32;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CONSTANT_NAME = 28;
  public static final int ST_PHP_LOOKING_FOR_STATIC_PROPERTY = 10;
  public static final int ST_PHP_DOC_COMMENT = 34;
  public static final int ST_PHP_LINE_COMMENT = 36;
  public static final int ST_PHP_LOOKING_FOR_FUNCTION_NAME = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 40;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 38;
  public static final int ST_PHP_VAR_OFFSET = 30;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\2\0\1\21\22\0\1\16\1\32\1\23\1\121"+
    "\1\22\1\36\1\37\1\103\1\104\1\70\1\34\1\31\1\105\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\112\1\20\1\33\1\27\1\30"+
    "\1\43\1\42\1\46\1\10\1\73\1\50\1\3\1\7\1\100\1\102"+
    "\1\74\1\114\1\111\1\77\1\107\1\47\1\44\1\75\1\116\1\45"+
    "\1\72\1\76\1\101\1\113\1\110\1\6\1\106\1\13\1\120\1\24"+
    "\1\17\1\41\1\115\1\25\1\57\1\63\1\67\1\65\1\66\1\54"+
    "\1\62\1\102\1\51\1\114\1\111\1\55\1\107\1\52\1\56\1\71"+
    "\1\116\1\61\1\60\1\53\1\101\1\64\1\110\1\6\1\106\1\13"+
    "\1\26\1\40\1\117\1\42\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\1\4\22\5\1\2\1\4\1\15\2\5"+
    "\1\4\2\5\1\16\1\17\1\20\1\21\1\22\2\21"+
    "\1\20\3\21\3\23\1\24\1\23\4\21\1\2\1\21"+
    "\2\25\3\2\1\0\1\2\2\26\1\2\1\27\1\30"+
    "\1\27\1\31\2\32\1\3\1\33\1\3\1\34\1\33"+
    "\1\35\4\0\4\36\2\37\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\0\1\3\2\0\6\5\1\45\2\0"+
    "\4\5\1\0\1\5\1\0\1\46\2\0\1\21\2\0"+
    "\2\6\1\0\1\47\1\50\1\51\1\52\4\5\1\53"+
    "\4\5\1\54\1\5\1\55\32\5\13\0\2\5\1\56"+
    "\1\5\3\0\2\57\2\60\1\61\1\62\1\60\3\0"+
    "\1\57\2\60\1\63\1\64\3\0\1\21\2\0\1\65"+
    "\2\0\1\66\7\0\1\67\2\0\1\70\1\0\1\71"+
    "\2\0\1\72\1\57\1\0\1\73\1\0\1\74\1\75"+
    "\1\36\1\76\1\77\3\0\7\5\2\3\1\100\3\5"+
    "\1\0\1\5\3\0\4\5\1\101\4\5\1\102\3\5"+
    "\1\103\5\5\1\104\12\5\1\105\14\5\1\106\12\0"+
    "\12\5\3\107\1\110\1\0\1\111\1\0\1\112\1\21"+
    "\1\0\1\113\1\0\1\113\1\0\1\114\1\115\1\36"+
    "\2\0\1\116\6\5\1\117\1\120\1\121\6\5\4\0"+
    "\1\122\5\5\1\123\11\5\1\124\2\5\1\125\1\126"+
    "\3\5\1\127\1\5\1\130\1\131\4\5\1\132\10\5"+
    "\12\0\13\5\1\110\1\0\1\36\1\133\1\0\3\5"+
    "\1\134\3\5\1\135\1\5\1\136\1\137\1\5\1\140"+
    "\2\141\3\0\3\5\1\142\10\5\1\143\1\5\1\144"+
    "\1\145\1\146\5\5\1\147\1\150\1\5\1\151\1\152"+
    "\1\5\1\153\3\5\1\154\10\0\1\155\1\0\1\156"+
    "\1\157\11\5\1\36\1\0\1\5\1\160\3\5\1\161"+
    "\3\5\3\0\1\162\13\5\1\163\1\164\1\165\1\166"+
    "\4\5\1\167\1\170\5\0\11\5\1\36\1\1\1\171"+
    "\4\5\1\172\1\173\1\5\2\174\1\0\1\175\2\5"+
    "\1\176\1\177\3\5\1\200\5\5\1\201\3\0\3\5"+
    "\1\202\5\5\1\36\1\0\3\5\1\203\1\204\1\0"+
    "\1\5\1\205\5\5\1\206\1\5\1\207\1\210\1\5"+
    "\1\0\1\211\3\5\1\212\3\5\1\36\1\0\2\5"+
    "\1\213\1\42\1\5\1\214\1\215\1\216\3\5\1\217"+
    "\1\0\2\5\1\220\1\221\2\5\1\36\1\0\1\222"+
    "\1\223\1\5\1\224\1\5\1\225\1\226\3\5\1\227"+
    "\1\36\1\0\5\5\1\0\1\230\1\231\1\232\2\5"+
    "\1\0\1\233\1\5\1\0\1\5\1\0\1\234\14\0"+
    "\1\235\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee"+
    "\0\u0a40\0\u0a92\0\u075e\0\u075e\0\u0ae4\0\u0b36\0\u075e\0\u075e"+
    "\0\u075e\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74"+
    "\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u075e\0\u0f0e\0\u0f60\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2"+
    "\0\u1524\0\u1576\0\u075e\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710"+
    "\0\u075e\0\u075e\0\u1762\0\u17b4\0\u075e\0\u1806\0\u1858\0\u18aa"+
    "\0\u18fc\0\u194e\0\u19a0\0\u075e\0\u19f2\0\u1a44\0\u1a96\0\u1ae8"+
    "\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1a44\0\u075e\0\u1cd4"+
    "\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e1c\0\u075e\0\u1e6e\0\u1ec0"+
    "\0\u075e\0\u1f12\0\u1f64\0\u075e\0\u075e\0\u1fb6\0\u2008\0\u075e"+
    "\0\u205a\0\u075e\0\u20ac\0\u075e\0\u20fe\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u075e\0\u2298\0\u22ea\0\u233c\0\u238e\0\u075e\0\u23e0"+
    "\0\u0668\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e"+
    "\0\u2670\0\u26c2\0\u2714\0\u2766\0\u27b8\0\u280a\0\u075e\0\u285c"+
    "\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a\0\u1524"+
    "\0\u2aec\0\u0b36\0\u2b3e\0\u075e\0\u2b90\0\u2be2\0\u2c34\0\u2c86"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u0a40\0\u2e20\0\u2e72\0\u2ec4"+
    "\0\u2f16\0\u0a40\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u0a40\0\u30b0"+
    "\0\u0a40\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee"+
    "\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e"+
    "\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e"+
    "\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u1576\0\u3a4c"+
    "\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc"+
    "\0\u075e\0\u3d2e\0\u3d80\0\u1806\0\u3dd2\0\u3e24\0\u3e76\0\u3d80"+
    "\0\u075e\0\u075e\0\u075e\0\u3dd2\0\u3ec8\0\u194e\0\u3f1a\0\u3f6c"+
    "\0\u3ec8\0\u3f1a\0\u075e\0\u075e\0\u3fbe\0\u4010\0\u4062\0\u40b4"+
    "\0\u4106\0\u1cd4\0\u075e\0\u4158\0\u1d26\0\u075e\0\u41aa\0\u1d78"+
    "\0\u1dca\0\u41fc\0\u424e\0\u42a0\0\u1e6e\0\u075e\0\u42f2\0\u1ec0"+
    "\0\u075e\0\u4344\0\u075e\0\u1fb6\0\u4396\0\u075e\0\u43e8\0\u443a"+
    "\0\u075e\0\u448c\0\u075e\0\u075e\0\u44de\0\u4530\0\u075e\0\u4582"+
    "\0\u45d4\0\u2008\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e\0\u47c0"+
    "\0\u4812\0\u285c\0\u28ae\0\u4864\0\u48b6\0\u4908\0\u495a\0\u49ac"+
    "\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c"+
    "\0\u0a40\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u0a40\0\u4dd6\0\u4e28"+
    "\0\u4e7a\0\u4dd6\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u0a40"+
    "\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4"+
    "\0\u52f6\0\u5348\0\u0a40\0\u539a\0\u53ec\0\u543e\0\u5490\0\u54e2"+
    "\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\u56ce\0\u5720\0\u0a40"+
    "\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u595e\0\u59b0"+
    "\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\u5b9c\0\u5bee\0\u5c40"+
    "\0\u5c92\0\u5ce4\0\u5d36\0\u5d88\0\u075e\0\u1762\0\u18aa\0\u5dda"+
    "\0\u5e2c\0\u075e\0\u5e7e\0\u075e\0\u5ed0\0\u5f22\0\u075e\0\u5f74"+
    "\0\u1e1c\0\u5fc6\0\u075e\0\u075e\0\u6018\0\u606a\0\u60bc\0\u0a40"+
    "\0\u610e\0\u6160\0\u61b2\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u0a40"+
    "\0\u0a40\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u6538"+
    "\0\u658a\0\u65dc\0\u662e\0\u4af4\0\u6680\0\u66d2\0\u6724\0\u6776"+
    "\0\u67c8\0\u0a40\0\u681a\0\u686c\0\u68be\0\u6910\0\u6962\0\u69b4"+
    "\0\u6a06\0\u6a58\0\u6aaa\0\u0a40\0\u6afc\0\u6b4e\0\u0a40\0\u0a40"+
    "\0\u6ba0\0\u6bf2\0\u6c44\0\u0a40\0\u6c96\0\u0a40\0\u0a40\0\u6ce8"+
    "\0\u6d3a\0\u6d8c\0\u6dde\0\u0a40\0\u6e30\0\u6e82\0\u6ed4\0\u6f26"+
    "\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0\0\u7112\0\u7164\0\u71b6"+
    "\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u7446"+
    "\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0\0\u7632\0\u7684\0\u76d6"+
    "\0\u7728\0\u075e\0\u777a\0\u77cc\0\u075e\0\u781e\0\u7870\0\u78c2"+
    "\0\u7914\0\u0a40\0\u7966\0\u79b8\0\u7a0a\0\u0a40\0\u7a5c\0\u0a40"+
    "\0\u7aae\0\u7b00\0\u0a40\0\u075e\0\u7b52\0\u7ba4\0\u7bf6\0\u7c48"+
    "\0\u7c9a\0\u7cec\0\u7d3e\0\u0a40\0\u7d90\0\u7de2\0\u7e34\0\u7e86"+
    "\0\u7ed8\0\u7f2a\0\u7f7c\0\u7fce\0\u0a40\0\u8020\0\u0a40\0\u0a40"+
    "\0\u0a40\0\u8072\0\u80c4\0\u8116\0\u8168\0\u81ba\0\u0a40\0\u0a40"+
    "\0\u820c\0\u0a40\0\u0a40\0\u825e\0\u0a40\0\u82b0\0\u8302\0\u8354"+
    "\0\u0a40\0\u83a6\0\u83f8\0\u844a\0\u849c\0\u84ee\0\u8540\0\u8592"+
    "\0\u85e4\0\u075e\0\u8636\0\u8688\0\u0a40\0\u86da\0\u872c\0\u877e"+
    "\0\u87d0\0\u8822\0\u8874\0\u88c6\0\u8918\0\u896a\0\u89bc\0\u8a0e"+
    "\0\u8a60\0\u8ab2\0\u8b04\0\u8b56\0\u8ba8\0\u0a40\0\u8bfa\0\u8c4c"+
    "\0\u8c9e\0\u8cf0\0\u8d42\0\u8d94\0\u0a40\0\u8de6\0\u8e38\0\u8e8a"+
    "\0\u8edc\0\u8f2e\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u90c8\0\u911a"+
    "\0\u0a40\0\u0a40\0\u0a40\0\u0a40\0\u916c\0\u91be\0\u9210\0\u9262"+
    "\0\u0a40\0\u0a40\0\u92b4\0\u9306\0\u9358\0\u93aa\0\u93fc\0\u944e"+
    "\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8\0\u963a\0\u968c\0\u96de"+
    "\0\u9730\0\u9782\0\u0a40\0\u97d4\0\u9826\0\u9878\0\u98ca\0\u0a40"+
    "\0\u0a40\0\u991c\0\u075e\0\u996e\0\u99c0\0\u9a12\0\u9a64\0\u9ab6"+
    "\0\u0a40\0\u0a40\0\u9b08\0\u9b5a\0\u9bac\0\u9bfe\0\u9c50\0\u9ca2"+
    "\0\u9cf4\0\u9d46\0\u9d98\0\u0a40\0\u9dea\0\u9e3c\0\u9e8e\0\u9ee0"+
    "\0\u9f32\0\u9f84\0\u0a40\0\u9fd6\0\ua028\0\ua07a\0\ua0cc\0\ua11e"+
    "\0\ua170\0\ua1c2\0\ua214\0\ua266\0\ua2b8\0\u0a40\0\u0a40\0\ua30a"+
    "\0\ua35c\0\u0a40\0\ua3ae\0\ua400\0\ua452\0\ua4a4\0\ua4f6\0\u0a40"+
    "\0\ua548\0\u0a40\0\u0a40\0\ua59a\0\ua5ec\0\u0a40\0\ua63e\0\ua690"+
    "\0\ua6e2\0\u0a40\0\ua734\0\ua786\0\ua7d8\0\ua82a\0\ua87c\0\ua8ce"+
    "\0\ua920\0\u0a40\0\ua972\0\ua9c4\0\u0a40\0\u0a40\0\u0a40\0\uaa16"+
    "\0\uaa68\0\uaaba\0\u0a40\0\uab0c\0\uab5e\0\uabb0\0\u0a40\0\u0a40"+
    "\0\uac02\0\uac54\0\uaca6\0\uacf8\0\u0a40\0\u0a40\0\uad4a\0\u0a40"+
    "\0\uad9c\0\u0a40\0\u075e\0\uadee\0\uae40\0\uae92\0\u0a40\0\ua972"+
    "\0\uaee4\0\uaf36\0\uaf88\0\uafda\0\ub02c\0\ub07e\0\ub0d0\0\u0a40"+
    "\0\u0a40\0\u0a40\0\ub122\0\ub174\0\ub1c6\0\u0a40\0\ub218\0\ub26a"+
    "\0\ub2bc\0\ub30e\0\u0a40\0\ub360\0\ub3b2\0\ub404\0\ub456\0\ub4a8"+
    "\0\ub4fa\0\ub54c\0\ub59e\0\ub5f0\0\ub642\0\ub694\0\ub6e6\0\u075e"+
    "\0\ub738";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\26\1\27\66\26\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\31\2\41\1\30\2\42"+
    "\1\43\1\44\1\42\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\72\1\75\1\76\1\77\1\67"+
    "\1\71\1\100\1\70\1\101\1\102\1\103\1\73\1\33"+
    "\1\104\1\43\1\105\1\106\1\104\1\107\1\105\1\75"+
    "\1\77\1\101\1\110\1\41\1\111\1\112\1\113\1\114"+
    "\1\41\1\115\1\41\1\116\1\117\1\41\1\120\1\41"+
    "\1\121\1\43\1\122\22\123\1\124\1\125\1\126\1\123"+
    "\1\127\73\123\22\130\1\131\1\130\1\132\1\125\1\133"+
    "\73\130\4\134\1\135\21\134\1\136\76\134\1\137\2\134"+
    "\3\137\1\134\2\137\1\134\2\42\2\134\1\42\22\134"+
    "\24\137\1\134\12\137\3\134\4\137\1\140\4\137\3\134"+
    "\15\141\1\142\3\141\1\143\1\144\1\141\1\145\1\141"+
    "\1\146\73\141\3\147\1\150\2\147\3\150\1\147\2\150"+
    "\30\147\24\150\1\147\12\150\3\147\4\150\1\147\4\150"+
    "\3\147\3\30\1\151\2\30\3\151\1\30\2\151\1\30"+
    "\1\0\26\30\24\151\1\30\12\151\3\30\4\151\1\30"+
    "\4\151\3\30\3\152\1\153\2\152\3\153\2\152\1\153"+
    "\1\152\1\154\3\152\1\155\22\152\24\153\1\152\12\153"+
    "\3\152\4\153\1\152\4\153\3\152\3\156\1\157\2\156"+
    "\3\157\1\156\2\157\30\156\24\157\1\156\12\157\3\156"+
    "\4\157\1\156\4\157\3\156\3\30\1\160\2\30\3\160"+
    "\1\30\2\160\1\30\1\0\26\30\24\160\1\30\12\160"+
    "\3\30\4\160\1\30\4\160\3\30\3\161\1\162\1\163"+
    "\1\161\3\162\1\161\2\162\1\161\2\42\2\161\1\42"+
    "\22\161\24\162\1\161\12\162\3\161\4\162\1\161\4\162"+
    "\6\161\1\162\2\161\3\162\1\161\2\162\1\161\2\42"+
    "\2\161\1\42\22\161\24\162\1\161\12\162\1\161\1\164"+
    "\1\161\4\162\1\161\4\162\3\161\3\165\1\166\2\165"+
    "\3\166\1\165\2\166\1\165\2\42\2\165\1\42\22\165"+
    "\24\166\1\165\12\166\3\165\4\166\1\165\4\166\3\165"+
    "\1\30\1\167\1\170\1\41\1\30\1\171\3\41\1\167"+
    "\2\41\1\30\2\172\1\164\1\170\1\172\1\173\1\170"+
    "\1\172\2\170\6\30\1\170\5\30\1\170\24\41\1\170"+
    "\12\41\1\172\2\170\4\41\1\170\4\41\1\170\1\174"+
    "\1\172\34\175\1\176\65\175\34\177\1\200\65\177\15\201"+
    "\1\202\3\201\1\203\11\201\1\204\2\201\1\205\4\201"+
    "\1\206\56\201\15\207\2\210\2\207\1\210\100\207\122\211"+
    "\33\26\1\212\121\26\1\0\2\26\1\213\4\26\1\214"+
    "\5\26\1\0\1\26\1\0\4\26\1\215\1\0\5\26"+
    "\3\0\12\26\1\0\15\26\123\0\1\31\1\216\1\217"+
    "\1\0\1\31\3\0\1\31\54\0\1\217\34\0\1\216"+
    "\1\220\2\0\1\216\3\0\1\216\15\0\1\65\73\0"+
    "\1\41\1\0\1\41\1\0\1\41\1\221\6\41\27\0"+
    "\3\41\1\222\2\41\1\222\2\41\1\223\6\41\1\224"+
    "\2\41\1\225\1\0\2\41\1\225\3\41\1\223\3\41"+
    "\3\0\1\41\1\226\2\41\1\0\1\224\3\41\7\0"+
    "\1\65\22\0\1\65\1\227\72\0\1\31\1\216\1\217"+
    "\1\0\1\31\1\230\1\0\1\231\1\31\51\0\1\231"+
    "\2\0\1\217\34\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\67\11\41\1\67\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\232\1\41\1\233\2\41\1\234\4\41"+
    "\1\232\1\233\10\41\1\0\3\41\1\234\4\41\1\235"+
    "\1\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\6\0\1\46\7\0\1\236\10\0"+
    "\1\41\1\237\13\41\1\237\6\41\1\0\12\41\1\240"+
    "\2\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\20\0\2\42\2\0\1\42\103\0\1\241"+
    "\2\0\3\241\1\0\2\241\30\0\24\241\1\0\12\241"+
    "\3\0\4\241\1\0\4\241\3\0\22\242\1\243\1\244"+
    "\1\245\1\242\1\246\73\242\27\0\1\64\1\65\120\0"+
    "\1\65\1\64\120\0\1\65\1\0\1\65\117\0\1\64"+
    "\121\0\1\247\1\65\2\0\1\250\1\0\1\251\113\0"+
    "\1\65\4\0\1\64\114\0\1\65\4\0\1\252\1\122"+
    "\113\0\1\65\1\253\120\0\1\65\7\0\1\65\111\0"+
    "\1\65\10\0\1\65\110\0\1\65\122\0\1\254\12\0"+
    "\1\65\57\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\255\13\41\1\255\6\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\256\1\0"+
    "\10\41\27\0\22\41\1\256\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\3\41\1\257\4\41\27\0\1\41\1\260\1\41\1\261"+
    "\2\41\1\261\5\41\1\262\1\260\1\41\1\257\4\41"+
    "\1\0\1\41\1\262\10\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\263\1\0\10\41\27\0\2\41"+
    "\1\264\10\41\1\264\6\41\1\263\1\41\1\0\10\41"+
    "\1\265\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\266\1\0\10\41\27\0\1\267\4\41\1\270"+
    "\4\41\1\267\7\41\1\266\1\41\1\0\3\41\1\270"+
    "\6\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\2\41\1\271\5\41\27\0\3\41\1\272"+
    "\2\41\1\273\1\274\1\271\3\41\1\275\7\41\1\0"+
    "\1\41\1\275\10\41\3\0\1\41\1\276\2\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\277\13\41\1\277\6\41\1\0\11\41\1\300"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\232\1\41\1\233\2\41\1\234"+
    "\3\41\1\301\1\232\1\233\10\41\1\0\3\41\1\234"+
    "\4\41\1\235\1\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\5\41\1\302"+
    "\16\41\1\0\3\41\1\302\6\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\303\1\0\10\41\27\0"+
    "\7\41\1\304\12\41\1\303\1\41\1\0\5\41\1\305"+
    "\4\41\3\0\2\41\1\306\1\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\307\10\41"+
    "\1\310\1\307\11\41\1\0\6\41\1\310\3\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\6\0\1\46\7\0\1\236\10\0\1\41\1\237"+
    "\10\41\1\311\2\41\1\237\6\41\1\0\12\41\1\240"+
    "\2\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\312\7\41\1\313\1\312"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\314\1\41"+
    "\1\315\6\41\1\316\1\314\1\315\10\41\1\0\6\41"+
    "\1\316\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\41\1\317\1\320"+
    "\10\41\1\320\1\41\1\317\6\41\1\0\10\41\1\321"+
    "\1\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\303\1\0\10\41\27\0\7\41\1\305\12\41\1\303"+
    "\1\41\1\0\5\41\1\305\4\41\3\0\2\41\1\306"+
    "\1\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\2\41\1\271\5\41\27\0\3\41\1\272\2\41\1\272"+
    "\1\41\1\271\3\41\1\275\7\41\1\0\1\41\1\275"+
    "\10\41\3\0\1\41\1\276\2\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\3\41\1\322"+
    "\2\41\1\322\5\41\1\323\7\41\1\0\1\41\1\323"+
    "\10\41\3\0\4\41\1\0\4\41\3\0\24\240\1\324"+
    "\56\240\1\244\16\240\7\0\1\325\1\326\5\0\1\327"+
    "\25\0\1\330\1\331\1\332\1\0\1\333\1\334\2\0"+
    "\1\325\1\0\1\330\1\332\1\335\1\331\1\0\1\326"+
    "\1\0\1\333\4\0\1\335\1\0\1\334\4\0\1\336"+
    "\21\0\1\41\1\0\1\41\1\0\10\41\27\0\5\41"+
    "\1\337\16\41\1\0\3\41\1\337\6\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\11\41\1\340\3\0\4\41\1\0"+
    "\4\41\115\0\1\341\10\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\312\10\41\1\312\10\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\342\1\41\3\0\22\123\1\343"+
    "\1\0\1\344\1\123\1\345\76\123\1\346\2\123\3\346"+
    "\1\123\1\347\1\346\6\123\1\350\1\351\1\344\1\123"+
    "\1\352\15\123\24\346\1\123\12\346\3\123\4\346\1\123"+
    "\4\346\147\123\1\353\1\351\1\344\1\123\1\354\73\123"+
    "\22\130\1\355\1\130\1\356\1\0\1\357\76\130\1\346"+
    "\2\130\3\346\1\130\1\360\1\346\6\130\1\361\1\130"+
    "\1\356\1\351\1\352\15\130\24\346\1\130\12\346\3\130"+
    "\4\346\1\130\4\346\147\130\1\353\1\130\1\356\1\351"+
    "\1\362\73\130\30\0\1\363\113\0\1\353\100\0\1\137"+
    "\1\0\1\137\1\0\10\137\27\0\24\137\1\0\12\137"+
    "\3\0\4\137\1\0\4\137\115\0\1\364\7\0\15\141"+
    "\1\0\3\141\1\0\1\365\1\141\1\366\1\141\1\367"+
    "\76\141\1\370\2\141\3\370\1\141\2\370\1\141\1\0"+
    "\3\141\1\0\1\365\1\141\1\366\1\141\1\367\15\141"+
    "\24\370\1\141\12\370\3\141\4\370\1\141\4\370\6\141"+
    "\1\370\2\141\3\370\1\141\2\370\1\141\1\371\3\141"+
    "\1\0\1\365\1\141\1\366\1\141\1\367\15\141\24\370"+
    "\1\141\12\370\3\141\4\370\1\141\4\370\3\141\3\0"+
    "\1\346\2\0\3\346\1\0\2\346\12\0\1\352\15\0"+
    "\24\346\1\0\12\346\3\0\4\346\1\0\4\346\3\0"+
    "\122\141\1\0\1\372\1\0\1\372\1\0\10\372\1\373"+
    "\2\0\1\374\1\373\22\0\24\372\1\0\12\372\3\0"+
    "\4\372\1\0\4\372\4\0\1\375\1\0\1\375\1\0"+
    "\10\375\1\376\2\0\1\377\1\376\22\0\24\375\1\0"+
    "\12\375\3\0\4\375\1\0\4\375\3\0\15\u0100\1\154"+
    "\3\u0100\1\154\101\u0100\1\u0101\1\u0100\1\u0101\1\u0100\5\u0101"+
    "\1\u0100\1\u0101\1\u0100\1\0\2\u0100\1\u0102\1\0\22\u0100"+
    "\24\u0101\1\u0100\12\u0101\3\u0100\4\u0101\1\u0100\4\u0101\6\u0100"+
    "\1\u0103\2\u0100\3\u0103\1\u0100\1\u0104\1\u0103\1\u0100\1\154"+
    "\3\u0100\1\154\22\u0100\24\u0103\1\u0100\12\u0103\3\u0100\4\u0103"+
    "\1\u0100\4\u0103\3\u0100\1\0\1\u0105\1\0\1\u0105\1\0"+
    "\10\u0105\1\u0106\2\0\1\u0107\1\u0106\22\0\24\u0105\1\0"+
    "\12\u0105\3\0\4\u0105\1\0\4\u0105\4\0\1\u0108\1\0"+
    "\1\u0108\1\0\10\u0108\1\u0109\2\0\1\u010a\1\u0109\22\0"+
    "\24\u0108\1\0\12\u0108\3\0\4\u0108\1\0\4\u0108\4\0"+
    "\1\162\1\0\1\162\1\0\10\162\27\0\24\162\1\0"+
    "\12\162\3\0\4\162\1\0\4\162\33\0\1\u010b\72\0"+
    "\1\u010c\1\0\1\u010c\1\0\10\u010c\2\u010d\2\0\1\u010d"+
    "\5\0\1\u010e\14\0\24\u010c\1\0\12\u010c\3\0\4\u010c"+
    "\1\0\4\u010c\4\0\1\167\3\0\1\167\3\0\1\167"+
    "\111\0\1\167\3\0\1\167\1\230\2\0\1\167\113\0"+
    "\1\u010f\2\0\3\u010f\1\0\2\u010f\30\0\24\u010f\1\0"+
    "\12\u010f\3\0\4\u010f\1\0\4\u010f\3\0\34\175\1\u0110"+
    "\121\175\1\u0110\1\u0111\64\175\34\177\1\u0112\121\177\1\u0112"+
    "\1\u0113\64\177\15\201\1\202\3\201\1\202\14\201\1\202"+
    "\4\201\1\202\56\201\15\0\1\u0114\104\0\15\201\1\202"+
    "\3\201\1\202\13\201\1\u0115\1\202\4\201\1\202\56\201"+
    "\30\0\1\u0116\121\0\1\254\106\0\2\210\2\0\1\210"+
    "\100\0\33\26\1\0\2\26\1\0\4\26\1\0\5\26"+
    "\1\0\1\26\1\0\4\26\2\0\5\26\3\0\12\26"+
    "\1\0\15\26\27\0\1\u0117\121\0\1\u0117\41\0\1\u0118"+
    "\3\0\1\u0118\113\0\1\u0119\3\0\1\u0119\27\0\1\216"+
    "\1\0\1\217\1\0\1\216\3\0\1\216\54\0\1\217"+
    "\34\0\1\167\2\0\1\u011a\1\167\3\0\1\167\17\0"+
    "\1\u011a\72\0\1\65\120\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u011b\1\41\1\u011c\14\41\1\0"+
    "\3\41\1\u011b\1\41\1\u011c\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\4\41\1\u011d\14\41\1\u011d\2\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\14\41\1\u011e\7\41\1\0\1\41\1\u011e"+
    "\10\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u011f\10\41\1\u011f"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\11\41\1\u0120\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\1\u0121"+
    "\3\41\1\u0121\5\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\u0122\1\0\1\u0122\1\0\1\u0122\1\0\3\u0122\34\0"+
    "\1\u0122\1\0\1\u0122\3\0\1\u0122\2\0\1\u0122\3\0"+
    "\1\u0122\1\0\3\u0122\3\0\1\u0122\33\0\1\u0123\3\0"+
    "\1\u0123\111\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\u0124\13\41\1\u0124\6\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u0125\12\41\1\0\6\41\1\u0125"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\3\41\1\u0126\2\41\1\u0126"+
    "\15\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\3\41\1\u0127"+
    "\2\41\1\u0127\15\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\36\0\1\u0128\67\0\1\41\1\0\1\u0129\1\0"+
    "\10\41\27\0\22\41\1\u0129\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\241\1\0\1\241\1\0"+
    "\10\241\27\0\24\241\1\0\12\241\3\0\4\241\1\0"+
    "\4\241\3\0\3\242\1\0\2\242\3\0\2\242\1\0"+
    "\6\242\1\243\1\244\1\245\1\242\1\0\15\242\24\0"+
    "\1\242\12\0\3\242\4\0\1\242\4\0\147\242\1\0"+
    "\1\244\1\245\1\242\1\246\73\242\30\0\1\65\120\0"+
    "\1\65\3\0\1\u012a\146\0\1\u012b\11\0\1\u012b\63\0"+
    "\1\u012c\102\0\2\253\2\0\1\253\115\0\2\254\2\0"+
    "\1\254\101\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u012d\14\41\1\0\5\41\1\u012d\4\41\3\0"+
    "\4\41\1\0\3\41\1\u012e\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u012f\7\41\1\0\1\41"+
    "\1\u012f\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\41\1\u0130\13\41"+
    "\1\u0130\6\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\4\41"+
    "\1\255\14\41\1\255\2\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\2\41\1\u0131\1\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\1\41\1\u0132\2\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u0133\12\41\1\0\6\41\1\u0133\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\2\41\1\u0134\5\41\27\0\10\41\1\u0134\12\41"+
    "\1\u0135\1\0\2\41\1\u0135\7\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0136\1\0\10\41\27\0"+
    "\22\41\1\u0136\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u0137\4\41\1\u0138\6\41\1\u0139\1\0\1\41"+
    "\1\u0138\1\u0139\2\41\1\u0137\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u013a\4\41\1\u0138\6\41\1\u0139\1\0\1\41"+
    "\1\u0138\1\u0139\2\41\1\u0137\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\22\41\1\u013b\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\14\41\1\u013c\7\41\1\0\1\41\1\u013c\10\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\24\41\1\0\1\u013d\3\41\1\u013d\5\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u013e\10\41\1\u013e\10\41"+
    "\1\0\10\41\1\u013f\1\41\3\0\1\u0140\3\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\u0141\13\41\1\u0141\6\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\12\41\1\u0142\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\14\41\1\u0143\7\41\1\0\1\41\1\u0143"+
    "\10\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\11\41\1\u0144\12\41\1\0"+
    "\6\41\1\u0144\3\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u0145"+
    "\10\41\1\u0145\1\41\1\u0146\6\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\u0145\10\41\1\u0145\10\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u0147\16\41\1\0"+
    "\3\41\1\u0147\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0148"+
    "\14\41\1\0\5\41\1\u0148\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u0149\11\41\1\u0149\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\12\41\1\u014a\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u014b\13\41\1\u014b\6\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u014c\16\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\u014d\2\41\1\u014d\15\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u014e\1\41"+
    "\1\u014f\2\41\1\u0150\7\41\1\0\1\41\1\u0150\3\41"+
    "\1\u014e\1\u014f\3\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\u0151\1\41"+
    "\1\u0152\7\41\1\u0151\1\u0152\10\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\u0153\4\41\1\u0154\4\41\1\u0153\11\41"+
    "\1\0\3\41\1\u0154\6\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\41"+
    "\1\u0155\13\41\1\u0155\6\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\3\41"+
    "\1\u0156\4\41\27\0\17\41\1\u0156\4\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u0157\7\41\1\0\1\41"+
    "\1\u0157\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0158\1\0\10\41\27\0\22\41\1\u0158\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\3\0\122\240"+
    "\55\0\1\u0159\21\0\1\u0159\66\0\1\u015a\4\0\1\u015b"+
    "\4\0\1\u015a\15\0\1\u015b\35\0\1\u015c\52\0\1\u015c"+
    "\41\0\1\u015d\62\0\1\u015d\100\0\1\u015e\13\0\1\u015e"+
    "\104\0\1\u015f\11\0\1\u015f\112\0\1\u0160\2\0\1\u0160"+
    "\122\0\1\u0161\22\0\1\u0161\72\0\1\u0162\2\0\1\u0162"+
    "\50\0\1\41\1\0\1\u0163\1\0\10\41\27\0\22\41"+
    "\1\u0163\1\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\5\41"+
    "\1\u0164\16\41\1\0\3\41\1\u0164\6\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\2\41"+
    "\1\u0165\5\41\27\0\3\41\1\u0166\1\u0167\1\41\1\u0166"+
    "\1\u0168\1\u0165\1\u0169\7\41\1\u0167\1\41\1\u016a\1\0"+
    "\2\41\1\u016a\2\41\1\u0168\1\u0169\2\41\1\u016b\3\0"+
    "\1\41\1\u016c\2\41\1\0\4\41\3\0\3\123\1\0"+
    "\2\123\3\0\2\123\1\0\6\123\1\350\1\351\1\344"+
    "\1\123\1\0\15\123\24\0\1\123\12\0\3\123\4\0"+
    "\1\123\4\0\25\123\1\0\1\351\1\344\1\123\1\354"+
    "\73\123\1\0\1\346\1\0\1\346\1\0\10\346\27\0"+
    "\24\346\1\0\12\346\3\0\4\346\1\0\4\346\1\0"+
    "\1\u016d\1\0\1\123\1\347\1\123\1\347\1\123\10\347"+
    "\5\123\1\343\1\0\1\344\1\123\1\345\15\123\24\347"+
    "\1\123\12\347\3\123\4\347\1\123\4\347\1\123\1\u016e"+
    "\1\123\3\130\1\0\2\130\3\0\2\130\1\0\6\130"+
    "\1\361\1\130\1\356\1\351\1\0\15\130\24\0\1\130"+
    "\12\0\3\130\4\0\1\130\4\0\25\130\1\0\1\130"+
    "\1\356\1\351\1\362\74\130\1\360\1\130\1\360\1\130"+
    "\10\360\5\130\1\355\1\130\1\356\1\0\1\357\15\130"+
    "\24\360\1\130\12\360\3\130\4\360\1\130\4\360\1\130"+
    "\1\u016f\1\130\3\141\1\u0170\2\141\3\u0170\2\141\1\u0170"+
    "\1\141\1\0\3\141\1\0\1\u0171\1\141\1\366\1\141"+
    "\1\u0172\15\141\24\u0170\1\141\12\u0170\3\141\4\u0170\1\141"+
    "\4\u0170\20\141\1\0\3\141\1\0\115\141\1\0\3\141"+
    "\1\0\1\u0172\1\141\1\366\1\141\1\u0173\74\141\1\370"+
    "\1\141\1\370\1\141\10\370\1\u0174\2\141\1\u0175\1\u0174"+
    "\1\365\1\141\1\366\1\141\1\367\15\141\24\370\1\141"+
    "\12\370\3\141\4\370\1\141\4\370\3\141\3\0\1\u0176"+
    "\2\0\3\u0176\1\0\2\u0176\30\0\24\u0176\1\0\12\u0176"+
    "\3\0\4\u0176\1\0\4\u0176\20\0\1\373\3\0\1\373"+
    "\115\0\1\376\3\0\1\376\100\0\15\u0100\1\0\3\u0100"+
    "\1\0\101\u0100\1\u0103\1\u0100\1\u0103\1\u0100\5\u0103\1\u0104"+
    "\1\u0103\1\u0104\1\u0177\2\u0100\1\u0178\1\u0177\22\u0100\24\u0103"+
    "\1\u0100\12\u0103\3\u0100\4\u0103\1\u0100\4\u0103\4\u0100\1\u0104"+
    "\1\u0100\1\u0104\1\u0100\10\u0104\1\u0179\2\u0100\1\u017a\1\u0179"+
    "\22\u0100\24\u0104\1\u0100\12\u0104\3\u0100\4\u0104\1\u0100\4\u0104"+
    "\3\u0100\15\0\1\u0106\3\0\1\u0106\115\0\1\u0109\3\0"+
    "\1\u0109\115\0\2\u010d\2\0\1\u010d\5\0\1\u010e\73\0"+
    "\1\u010f\1\0\1\u010f\1\0\10\u010f\27\0\24\u010f\1\0"+
    "\12\u010f\3\0\4\u010f\1\0\4\u010f\3\0\34\175\1\u0110"+
    "\1\u017b\64\175\34\177\1\u0112\1\u017c\64\177\15\201\1\202"+
    "\3\201\1\202\14\201\1\202\4\201\1\202\14\201\1\u017d"+
    "\11\201\1\u017d\27\201\15\0\2\u0116\2\0\1\u0116\202\0"+
    "\1\u017e\64\0\1\u017f\13\0\1\u017f\41\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u0180\14\41\1\0"+
    "\5\41\1\u0180\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\u0181\1\0\10\41\27\0\22\41\1\u0181"+
    "\1\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\2\41\1\u0182\5\41\27\0"+
    "\4\41\1\u0183\1\u0184\2\41\1\u0182\3\41\1\u0185\4\41"+
    "\1\u0183\2\41\1\0\1\41\1\u0185\1\41\1\u0184\6\41"+
    "\3\0\2\41\1\u0186\1\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0187\1\0\10\41\27\0\22\41\1\u0187\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u0188\12\41"+
    "\1\0\6\41\1\u0188\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u0189"+
    "\11\41\1\u0189\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u018a\14\41\1\0\5\41\1\u018a\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u018b\1\0"+
    "\10\41\27\0\22\41\1\u018b\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\14\41\1\u018c\7\41\1\0\1\41\1\u018c"+
    "\10\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u018d\10\41\1\u018d"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\23\41\1\u018e"+
    "\1\0\2\41\1\u018e\7\41\3\0\4\41\1\0\4\41"+
    "\36\0\1\u012a\67\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u018f\10\41\1\u018f\10\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\6\0\1\u0190\2\0\3\u0190"+
    "\1\0\2\u0190\2\0\1\u012a\4\0\1\u0191\20\0\24\u0190"+
    "\1\0\12\u0190\1\u0192\2\0\4\u0190\1\0\4\u0190\72\0"+
    "\1\u0193\3\0\1\u0193\43\0\2\u0194\2\0\1\u0194\101\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\10\41\1\u0195\1\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\10\41\1\u0196\1\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0197"+
    "\14\41\1\0\5\41\1\u0197\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u0198\10\41\1\u0198\10\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u0199\1\0"+
    "\10\41\27\0\22\41\1\u0199\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u019a\12\41\1\0\6\41\1\u019a"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u019b\10\41\1\u019b"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\11\41\1\u019c"+
    "\12\41\1\0\6\41\1\u019c\3\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u019d\1\0\10\41\27\0"+
    "\22\41\1\u019d\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\7\41\1\u019e\14\41\1\0\5\41\1\u019e\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u019f\12\41\1\0\6\41\1\u019f"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\15\41\1\u01a0\6\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u01a1\1\0\10\41\27\0\22\41\1\u01a1\1\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\11\41\1\u01a2\12\41\1\0"+
    "\6\41\1\u01a2\3\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\5\41\1\u01a3"+
    "\16\41\1\0\3\41\1\u01a3\6\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u01a4\1\0\10\41\27\0"+
    "\22\41\1\u01a4\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u01a5\11\41\1\u01a5\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\13\41\1\u01a6\10\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u01a7\14\41\1\0\5\41\1\u01a7\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\2\41\1\u01a8\5\41\27\0\10\41\1\u01a8\13\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u01a9\14\41"+
    "\1\0\5\41\1\u01a9\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\5\41"+
    "\1\u01aa\16\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u01ab\14\41\1\0\5\41\1\u01ab\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u01ac\11\41\1\u01ac\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\3\41\1\u01ad\4\41\27\0\17\41\1\u01ad\4\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\11\41\1\u01ae\12\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\21\41\1\u01af\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u01b0\4\41\1\u01b1"+
    "\7\41\1\0\1\41\1\u01b1\3\41\1\u01b0\4\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\23\41\1\u01b2\1\0\2\41\1\u01b2\7\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u01b3\12\41\1\0\6\41"+
    "\1\u01b3\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u01b4\1\0\10\41\27\0\22\41\1\u01b4\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\3\41\1\u01b5\2\41"+
    "\1\u01b5\15\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\14\41"+
    "\1\u01b6\7\41\1\0\1\41\1\u01b6\10\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u01b7\14\41\1\0\5\41\1\u01b7\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\u01b8\2\41\1\u01b8\11\41"+
    "\1\u01b9\3\41\1\0\12\41\3\0\4\41\1\0\1\u01b9"+
    "\3\41\4\0\1\41\1\0\1\u01ba\1\0\10\41\27\0"+
    "\22\41\1\u01ba\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\11\41\1\u01bb\12\41\1\0\6\41\1\u01bb\3\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u01bc\1\0"+
    "\10\41\27\0\22\41\1\u01bc\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\47\0\1\u01bd\11\0\1\u01bd\107\0"+
    "\1\u01be\11\0\1\u01be\112\0\1\u01bf\2\0\1\u01bf\163\0"+
    "\1\u01c0\53\0\1\u01c1\10\0\1\u01c1\107\0\1\u01c2\13\0"+
    "\1\u01c2\141\0\1\u01c3\73\0\1\u01c4\22\0\1\u01c4\70\0"+
    "\1\u01c5\13\0\1\u01c5\120\0\1\u01c6\11\0\1\u01c6\30\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\11\41\1\u01c7"+
    "\12\41\1\0\6\41\1\u01c7\3\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\11\41\1\u01c8\12\41\1\0\6\41\1\u01c8\3\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u01c9\16\41\1\0\3\41\1\u01c9"+
    "\4\41\1\u01ca\1\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u01cb"+
    "\10\41\1\u01cb\10\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\5\41\1\u01cc\16\41\1\0\3\41\1\u01cc\6\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\1\41\1\u01cd\13\41\1\u01cd\6\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u01ce\16\41\1\0"+
    "\3\41\1\u01ce\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\11\41\1\u01cf"+
    "\12\41\1\0\6\41\1\u01cf\3\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u01d0\10\41\1\u01d0\10\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u01d1\1\0"+
    "\10\41\27\0\22\41\1\u01d1\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\u0170\1\0\1\u0170\1\0"+
    "\10\u0170\27\0\24\u0170\1\0\12\u0170\3\0\4\u0170\1\0"+
    "\4\u0170\1\0\1\u01d2\1\0\3\141\1\0\2\141\3\0"+
    "\2\141\1\0\1\141\1\0\3\141\1\0\1\u0171\1\141"+
    "\1\366\1\141\1\0\15\141\24\0\1\141\12\0\3\141"+
    "\4\0\1\141\4\0\20\141\1\0\3\141\2\0\1\141"+
    "\1\366\1\141\1\u0173\110\141\1\u0174\3\141\1\u0174\1\365"+
    "\1\141\1\366\1\141\1\367\73\141\1\0\1\u0176\1\0"+
    "\1\u0176\1\0\10\u0176\1\u0174\2\0\1\u01d3\1\u0174\22\0"+
    "\24\u0176\1\0\12\u0176\3\0\4\u0176\1\0\4\u0176\3\0"+
    "\15\u0100\1\u0177\3\u0100\1\u0177\115\u0100\1\u0179\3\u0100\1\u0179"+
    "\100\u0100\15\201\1\202\3\201\1\202\14\201\1\202\4\201"+
    "\1\202\23\201\1\u01d4\3\201\1\u01d4\26\201\71\0\1\u01d5"+
    "\3\0\1\u01d5\75\0\1\u01d6\22\0\1\u01d6\26\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\3\41\1\u01d7\2\41"+
    "\1\u01d7\15\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u01d8"+
    "\11\41\1\u01d8\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u01d9\1\0\10\41\27\0"+
    "\22\41\1\u01d9\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\2\41\1\u01da"+
    "\5\41\27\0\10\41\1\u01da\13\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\24\41\1\0\12\41\3\0\2\41\1\u01db"+
    "\1\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\24\41\1\0\11\41\1\u01dc\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\5\41\1\u01dd\16\41\1\0\3\41\1\u01dd\6\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\1\u01de"+
    "\3\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\u01df\10\41\1\u01df\10\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u01e0\1\0\10\41\27\0\22\41\1\u01e0\1\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\11\41\1\u01e1\12\41\1\0"+
    "\6\41\1\u01e1\3\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u01e2"+
    "\14\41\1\0\5\41\1\u01e2\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\0\12\41\3\0\3\41\1\u01e3\1\0\4\41"+
    "\4\0\1\u0190\1\0\1\u0190\1\0\10\u0190\1\u01e4\3\0"+
    "\1\u01e5\22\0\24\u0190\1\0\12\u0190\3\0\4\u0190\1\0"+
    "\4\u0190\6\0\1\u01e6\2\0\3\u01e6\1\0\2\u01e6\30\0"+
    "\24\u01e6\1\0\12\u01e6\3\0\4\u01e6\1\0\4\u01e6\6\0"+
    "\1\u01e7\2\0\3\u01e7\1\0\2\u01e7\30\0\24\u01e7\1\0"+
    "\12\u01e7\3\0\4\u01e7\1\0\4\u01e7\50\0\1\u01e8\13\0"+
    "\1\u01e8\41\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\41\1\u01e9\13\41\1\u01e9\6\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u01ea\16\41\1\0\3\41\1\u01ea"+
    "\6\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\41\1\u01eb\13\41\1\u01eb"+
    "\6\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\12\41\3\0\1\u01ec\3\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\14\41\1\u01ed\7\41"+
    "\1\0\1\41\1\u01ed\10\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\10\41\1\u01ee\1\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\u01ef\10\41\1\u01ef\10\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u01f0\13\41\1\u01f0\6\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u01f1"+
    "\1\0\10\41\27\0\2\41\1\u01f2\10\41\1\u01f2\6\41"+
    "\1\u01f1\1\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\10\41\1\u01f3\1\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\13\41"+
    "\1\u01f4\10\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u01f5\14\41\1\0\5\41\1\u01f5\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u01f6\1\0\10\41"+
    "\27\0\22\41\1\u01f6\1\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u01f7\14\41\1\0\5\41\1\u01f7\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\2\41"+
    "\1\u01f8\1\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\7\41\1\u01f9\14\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u01fa\16\41\1\0\3\41"+
    "\1\u01fa\6\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\6\41\1\u01fb\15\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\23\41\1\u01fc\1\0"+
    "\2\41\1\u01fc\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u01fd"+
    "\10\41\1\u01fd\10\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\5\41\1\u01fe\16\41\1\0\3\41\1\u01fe\6\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\7\41\1\u01ff\14\41\1\0\5\41\1\u01ff"+
    "\4\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\0\11\41\1\u0200"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\2\41\1\u0201\10\41\1\u0201\10\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0202\1\0\10\41\27\0\22\41\1\u0202\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\14\41\1\u0203\7\41"+
    "\1\0\1\41\1\u0203\10\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u0204\1\0\10\41\27\0\22\41"+
    "\1\u0204\1\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u0205\14\41\1\0\5\41\1\u0205\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u0206\10\41\1\u0206\10\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\3\41\1\u0207\2\41\1\u0207\15\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\5\41\1\u0208\16\41"+
    "\1\0\3\41\1\u0208\6\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u0209\14\41\1\0\5\41\1\u0209\4\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u020a\10\0\1\u020a\117\0\1\u020b"+
    "\21\0\1\u020b\70\0\1\u020c\10\0\1\u020c\45\0\1\u020d"+
    "\62\0\1\u020d\110\0\1\u020e\21\0\1\u020e\70\0\1\u020f"+
    "\10\0\1\u020f\52\0\1\u0210\52\0\1\u0210\41\0\1\u0211"+
    "\12\0\1\u020e\47\0\1\u0211\1\0\1\u0212\102\0\1\u0213"+
    "\22\0\1\u0213\30\0\1\u020a\62\0\1\u020a\34\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\4\41\1\u0214\14\41"+
    "\1\u0214\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\u0215\1\0\10\41\27\0\22\41"+
    "\1\u0215\1\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u0216\12\41\1\0\6\41\1\u0216\3\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u0217\2\41\1\u0217\15\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\1\41"+
    "\1\u0218\2\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\41\1\u0219\13\41\1\u0219\6\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\2\41\1\u021a\10\41"+
    "\1\u021a\10\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\3\41"+
    "\1\u021b\2\41\1\u021b\15\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\2\41\1\u021c\10\41\1\u021c\10\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\11\41\1\u021d\12\41\1\0\6\41"+
    "\1\u021d\3\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u021e\14\41"+
    "\1\0\5\41\1\u021e\4\41\3\0\4\41\1\0\4\41"+
    "\20\0\1\u0174\3\0\1\u0174\100\0\15\201\1\202\3\201"+
    "\1\202\14\201\1\202\4\201\1\202\1\201\1\u021f\13\201"+
    "\1\u021f\40\201\71\0\1\u0220\3\0\1\u0220\25\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\4\41\1\u0221\14\41"+
    "\1\u0221\2\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\41"+
    "\1\u0222\13\41\1\u0222\6\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\23\41\1\u0223\1\0\2\41\1\u0223\7\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\5\41\1\u0224\16\41\1\0\3\41\1\u0224"+
    "\6\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u0225\16\41\1\0"+
    "\3\41\1\u0225\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\2\41\1\u0226\5\41\27\0"+
    "\10\41\1\u0226\13\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\23\41\1\u0227\1\0\2\41\1\u0227\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u0228\12\41\1\0\6\41\1\u0228\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u0229\16\41\1\0\3\41"+
    "\1\u0229\6\41\3\0\4\41\1\0\4\41\20\0\1\u01e4"+
    "\105\0\1\u01e6\1\0\1\u01e6\1\0\10\u01e6\6\0\1\u022a"+
    "\20\0\24\u01e6\1\0\12\u01e6\3\0\4\u01e6\1\0\4\u01e6"+
    "\4\0\1\u01e7\1\0\1\u01e7\1\0\10\u01e7\27\0\24\u01e7"+
    "\1\0\12\u01e7\1\u022b\2\0\4\u01e7\1\0\4\u01e7\54\0"+
    "\1\u022c\22\0\1\u022c\26\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u022d\2\41\1\u022d\15\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\41\1\u022e\13\41\1\u022e"+
    "\6\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u022f"+
    "\10\41\1\u022f\10\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\0\1\u0230\3\41\1\u0230\5\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\11\41\1\u0231\12\41\1\0\6\41\1\u0231\3\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\1\41\1\u0232\13\41\1\u0232\6\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\u0233\5\41\27\0\10\41"+
    "\1\u0233\13\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\2\41"+
    "\1\u0234\10\41\1\u0234\10\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u0235\2\41\1\u0235\15\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\4\41\1\u0236\14\41\1\u0236\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\17\41\1\u0237\4\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\12\41"+
    "\3\0\1\41\1\u0238\2\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\23\41\1\u0239\1\0"+
    "\2\41\1\u0239\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\16\41\1\u023a"+
    "\5\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\11\41\1\u023b\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u023c\12\41"+
    "\1\0\6\41\1\u023c\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\3\41"+
    "\1\u023d\2\41\1\u023d\15\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\3\41"+
    "\1\u023e\4\41\27\0\17\41\1\u023e\4\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\23\41\1\u023f\1\0\2\41\1\u023f"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u0240\14\41\1\0"+
    "\5\41\1\u0240\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0241"+
    "\14\41\1\0\5\41\1\u0241\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\23\41\1\u0242\1\0\2\41\1\u0242\7\41\3\0\4\41"+
    "\1\0\4\41\56\0\1\u020e\22\0\1\u020e\26\0\1\u0243"+
    "\12\0\1\u020e\47\0\1\u0243\1\0\1\u0212\76\0\1\u020f"+
    "\13\0\1\u020f\127\0\1\u020a\3\0\1\u020a\44\0\1\u020e"+
    "\51\0\1\u0212\137\0\1\u020e\70\0\1\u0244\21\0\1\u0244"+
    "\104\0\1\u0245\15\0\1\u0245\70\0\1\u0246\2\0\1\u0246"+
    "\50\0\1\41\1\0\1\41\1\0\10\41\2\u0247\2\0"+
    "\1\u0247\22\0\24\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0248\1\0\10\41\27\0"+
    "\22\41\1\u0248\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\23\41\1\u0249\1\0\2\41\1\u0249\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u024a\1\0\10\41"+
    "\27\0\22\41\1\u024a\1\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u024b\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\5\41\1\u024c\16\41\1\0\3\41\1\u024c\6\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u024d"+
    "\1\0\10\41\27\0\22\41\1\u024d\1\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u024e\7\41\1\0\1\41"+
    "\1\u024e\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u024f\14\41"+
    "\1\0\5\41\1\u024f\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\11\41\1\u0250\3\0\4\41\1\0\4\41\3\0"+
    "\15\201\1\202\3\201\1\202\14\201\1\202\4\201\1\202"+
    "\5\201\1\u0251\22\201\1\u0251\25\201\53\0\1\u0252\22\0"+
    "\1\u0252\24\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\14\41\1\u0253\7\41\1\0\1\41\1\u0253\10\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\u0254\1\0"+
    "\10\41\27\0\22\41\1\u0254\1\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\11\41\1\u0255\12\41\1\0\6\41\1\u0255"+
    "\3\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\7\41\1\u0256\14\41\1\0"+
    "\5\41\1\u0256\4\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\11\41\1\u0257"+
    "\12\41\1\0\6\41\1\u0257\3\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\24\41\1\0\11\41\1\u0258\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\1\u0259\3\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\1\u025a\11\41"+
    "\1\u025a\11\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\20\0\1\u01e4\3\0\1\u01e5\115\0\1\u025b\3\0\1\u025c"+
    "\171\0\1\u025d\3\0\1\u025d\25\0\1\41\1\0\1\u025e"+
    "\1\0\10\41\27\0\22\41\1\u025e\1\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\23\41\1\u025f\1\0\2\41\1\u025f"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u0260\10\41\1\u0260"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\7\41\1\u0261"+
    "\14\41\1\0\5\41\1\u0261\4\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u0262\1\0\10\41\27\0"+
    "\22\41\1\u0262\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\2\41\1\u0263\10\41\1\u0263\10\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\4\41\1\u0264\14\41\1\u0264\2\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\23\41\1\u0265\1\0\2\41"+
    "\1\u0265\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0266\1\0\10\41\27\0\22\41\1\u0266\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u0267\12\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u0268\1\0\10\41\27\0\22\41\1\u0268\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\10\41"+
    "\1\u0269\1\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\11\41\1\u026a\12\41"+
    "\1\0\6\41\1\u026a\3\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\7\41"+
    "\1\u026b\14\41\1\0\5\41\1\u026b\4\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u026c\1\0\10\41"+
    "\27\0\22\41\1\u026c\1\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u026d\10\0\1\u026d\45\0\1\u020e"+
    "\62\0\1\u020e\36\0\1\u026e\62\0\1\u026e\115\0\1\u020e"+
    "\15\0\1\u020e\30\0\1\u026f\5\0\2\u0247\2\0\1\u0247"+
    "\32\0\1\u026f\46\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0270\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u0271\14\41\1\0\5\41\1\u0271\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\14\41\1\u0272\7\41\1\0\1\41"+
    "\1\u0272\10\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u0273\1\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\7\41\1\u0274\14\41"+
    "\1\0\5\41\1\u0274\4\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0275\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\14\41"+
    "\1\u0276\7\41\1\0\1\41\1\u0276\10\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0277\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u0278\11\41\1\u0278\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\3\0\15\201\1\202\3\201\1\202"+
    "\14\201\1\202\4\201\1\202\25\201\1\u0279\3\201\1\u0279"+
    "\24\201\15\0\2\u027a\2\0\1\u027a\101\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\2\41\1\u027b\10\41\1\u027b"+
    "\10\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\2\41\1\u027c"+
    "\10\41\1\u027c\10\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\23\41\1\u027d\1\0\2\41\1\u027d\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\u027e\1\0\10\41"+
    "\27\0\22\41\1\u027e\1\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\3\41\1\u027f\2\41\1\u027f\15\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\20\0\1\u025b\157\0\1\u0280"+
    "\22\0\1\u0280\24\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\24\41\1\0\12\41\3\0\4\41\1\0\2\41"+
    "\1\u0281\1\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u0282\14\41\1\0\5\41\1\u0282\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\23\41\1\u0283\1\0\2\41\1\u0283"+
    "\7\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\23\41\1\u0284\1\0\2\41"+
    "\1\u0284\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\1\u0285\11\41\1\u0285"+
    "\11\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\u0286\1\0\10\41\27\0\22\41\1\u0286"+
    "\1\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\12\41\3\0\4\41\1\0\2\41\1\u0287\1\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\22\41\1\u0288"+
    "\1\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\3\41\1\u0289"+
    "\2\41\1\u0289\15\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u028a\1\0\10\41\27\0"+
    "\22\41\1\u028a\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u028b\1\0\10\41\27\0"+
    "\22\41\1\u028b\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\u028c\1\0\10\41\27\0"+
    "\22\41\1\u028c\1\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\52\0\1\u020e\2\0\1\u020e\114\0\1\u020e\13\0"+
    "\1\u020e\105\0\1\u028d\13\0\1\u028d\41\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u028e\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\5\41\1\u028f\16\41\1\0"+
    "\3\41\1\u028f\6\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\1\u0290\3\41\1\u0290\5\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0291\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0292\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u0293\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\23\41"+
    "\1\u0294\1\0\2\41\1\u0294\7\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\4\41\1\u0295\14\41\1\u0295\2\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\3\0\15\201\1\202\3\201\1\202"+
    "\14\201\1\202\4\201\1\202\7\201\1\u0296\22\201\1\u0296"+
    "\23\201\15\0\2\u027a\2\0\1\u027a\33\0\1\u0297\21\0"+
    "\1\u0297\23\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\23\41\1\u0298\1\0\2\41\1\u0298\7\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u0299\13\41\1\u0299\6\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\11\41\1\u029a\3\0"+
    "\4\41\1\0\4\41\33\0\1\u029b\72\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\u029c\11\41\1\u029c\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u029d\1\0\10\41\27\0\22\41\1\u029d\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\u029e\1\0\10\41\27\0\22\41\1\u029e\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\u029f\5\41\27\0\10\41"+
    "\1\u029f\13\41\1\0\12\41\3\0\4\41\1\0\4\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\1\u02a0"+
    "\11\41\1\u02a0\11\41\1\0\12\41\3\0\4\41\1\0"+
    "\4\41\4\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\1\u02a1\11\41\1\u02a1\11\41\1\0\12\41\3\0\4\41"+
    "\1\0\4\41\4\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\7\41\1\u02a2\14\41\1\0\5\41\1\u02a2\4\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\4\41\1\u02a3\14\41\1\u02a3\2\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\47\0\1\u02a4"+
    "\11\0\1\u02a4\44\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\u02a5\11\41\1\u02a5\11\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\2\41\1\u02a6\10\41\1\u02a6\10\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u02a7\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\24\41\1\0\12\41\3\0"+
    "\4\41\1\0\2\41\1\u02a8\1\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\1\u02a9\11\41\1\u02a9\11\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u02aa\1\41\3\0\15\201"+
    "\1\202\3\201\1\202\6\201\1\u02ab\5\201\1\202\4\201"+
    "\1\202\56\201\46\0\1\u02ac\10\0\1\u02ac\43\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\11\41"+
    "\1\u02ad\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\u02ae\1\0\10\41\27\0\22\41\1\u02ae\1\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\20\0\2\u029b\2\0"+
    "\1\u029b\101\0\1\41\1\0\1\41\1\0\10\41\27\0"+
    "\3\41\1\u02af\2\41\1\u02af\15\41\1\0\12\41\3\0"+
    "\4\41\1\0\4\41\4\0\1\41\1\0\1\41\1\0"+
    "\2\41\1\u02b0\5\41\27\0\10\41\1\u02b0\13\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\3\41\1\u02b1\2\41\1\u02b1"+
    "\15\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\14\41\1\u02b2"+
    "\7\41\1\0\1\41\1\u02b2\10\41\3\0\4\41\1\0"+
    "\4\41\112\0\1\u02b3\13\0\1\41\1\0\1\41\1\0"+
    "\10\41\27\0\3\41\1\u02b4\2\41\1\u02b4\15\41\1\0"+
    "\12\41\3\0\4\41\1\0\4\41\4\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\23\41\1\u02b5\1\0\2\41"+
    "\1\u02b5\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\12\41"+
    "\3\0\1\41\1\u02b6\2\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\24\41\1\0\12\41"+
    "\3\0\4\41\1\0\2\41\1\u02b7\1\41\3\0\15\201"+
    "\1\u02b8\1\u02ab\2\201\1\u02b8\14\201\1\202\4\201\1\202"+
    "\56\201\47\0\1\u02b9\2\0\1\u02b9\50\0\1\41\1\0"+
    "\1\41\1\0\10\41\27\0\23\41\1\u02ba\1\0\2\41"+
    "\1\u02ba\7\41\3\0\4\41\1\0\4\41\4\0\1\41"+
    "\1\0\1\41\1\0\10\41\27\0\23\41\1\u02bb\1\0"+
    "\2\41\1\u02bb\7\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\12\41\3\0\4\41\1\0\2\41\1\u02bc\1\41\4\0"+
    "\1\41\1\0\1\u02bd\1\0\10\41\27\0\22\41\1\u02bd"+
    "\1\41\1\0\12\41\3\0\4\41\1\0\4\41\4\0"+
    "\1\41\1\0\1\41\1\0\10\41\27\0\24\41\1\0"+
    "\1\u02be\3\41\1\u02be\5\41\3\0\4\41\1\0\4\41"+
    "\65\0\1\u02bf\15\0\1\u02bf\22\0\1\41\1\0\1\u02c0"+
    "\1\0\10\41\27\0\22\41\1\u02c0\1\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\u02c1"+
    "\1\0\10\41\27\0\22\41\1\u02c1\1\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\4\41"+
    "\1\0\2\41\1\u02c2\1\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\24\41\1\0\12\41\3\0\4\41"+
    "\1\0\2\41\1\u02c3\1\41\4\0\1\41\1\0\1\41"+
    "\1\0\10\41\27\0\5\41\1\u02c4\16\41\1\0\3\41"+
    "\1\u02c4\6\41\3\0\4\41\1\0\4\41\104\0\1\u02c5"+
    "\21\0\1\41\1\0\1\41\1\0\10\41\27\0\24\41"+
    "\1\0\12\41\3\0\4\41\1\0\2\41\1\u02c6\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\10\41\27\0\11\41"+
    "\1\u02c7\12\41\1\0\6\41\1\u02c7\3\41\3\0\4\41"+
    "\1\0\4\41\51\0\1\u02c8\10\0\1\u02c8\43\0\1\41"+
    "\1\0\1\u02c9\1\0\10\41\27\0\22\41\1\u02c9\1\41"+
    "\1\0\12\41\3\0\4\41\1\0\4\41\65\0\1\u02ca"+
    "\15\0\1\u02ca\22\0\1\41\1\0\1\41\1\0\10\41"+
    "\27\0\1\41\1\u02cb\13\41\1\u02cb\6\41\1\0\12\41"+
    "\3\0\4\41\1\0\4\41\6\0\1\u02cc\62\0\1\u02cc"+
    "\50\0\2\u02cc\2\0\1\u02cc\5\0\1\u02cd\107\0\2\u02cd"+
    "\2\0\1\u02cd\1\0\1\u02ce\45\0\1\u02cf\3\0\1\u02cf"+
    "\5\0\1\u02d0\107\0\1\u02d1\3\0\1\u02d1\126\0\1\u02d2"+
    "\110\0\1\u02d3\3\0\1\u02d3\126\0\1\u02d4\110\0\1\u02d5"+
    "\3\0\1\u02d5\126\0\1\u02d6\110\0\1\u02d7\3\0\1\u02d7"+
    "\41\0\2\u02d5\2\0\1\u02d5\6\0\1\u02d8\162\0\1\u02d9"+
    "\3\0\1\u02d9\47\0\1\u02d5\201\0\1\u02d5\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[46986];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\25\1\1\11\5\1\2\11\2\1\1\11\6\1"+
    "\1\11\12\1\1\11\4\1\1\0\1\1\1\11\2\1"+
    "\1\11\2\1\2\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\2\0\6\1\1\11\2\0\4\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\11\2\0\2\1"+
    "\1\0\52\1\13\0\2\1\1\11\1\1\3\0\3\1"+
    "\3\11\1\1\3\0\3\1\2\11\3\0\1\1\2\0"+
    "\1\11\2\0\1\11\7\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\1\1\0\1\11\1\0\2\11"+
    "\2\1\1\11\3\0\15\1\1\0\1\1\3\0\54\1"+
    "\12\0\12\1\1\11\3\1\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\20\1\4\0\51\1\12\0\13\1\1\11\1\0"+
    "\1\1\1\11\1\0\15\1\1\11\1\1\3\0\41\1"+
    "\10\0\1\11\1\0\14\1\1\0\11\1\3\0\26\1"+
    "\5\0\23\1\1\11\1\1\1\0\17\1\3\0\12\1"+
    "\1\0\5\1\1\0\14\1\1\0\11\1\1\0\14\1"+
    "\1\0\7\1\1\0\6\1\1\11\5\1\1\0\5\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private int parenBalanceInConst = 0; // for context sensitive lexer
    private int bracketBalanceInConst = 0; // for context sensitive lexer
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private boolean isInConst;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 158: break;
        case 94:
          { return PHPTokenId.PHP_FALSE;
          }
        case 159: break;
        case 22:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 160: break;
        case 30:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 161: break;
        case 73:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 162: break;
        case 4:
          { if(isInConst) {
        // for checking arrays
        // e.g. const CONST = [1, 2], const GOTO = 1;
        String text = yytext();
        switch (text) {
            case "[":
                bracketBalanceInConst++;
                break;
            case "]":
                bracketBalanceInConst--;
                break;
            case "(":
                parenBalanceInConst++;
                break;
            case ")":
                parenBalanceInConst--;
                break;
            default:
                break;
        }
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 163: break;
        case 60:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 164: break;
        case 128:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 165: break;
        case 147:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 166: break;
        case 32:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 167: break;
        case 118:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 168: break;
        case 154:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 169: break;
        case 18:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 170: break;
        case 36:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 171: break;
        case 50:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 172: break;
        case 85:
          { return PHPTokenId.PHP_LIST;
          }
        case 173: break;
        case 93:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 174: break;
        case 15:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 175: break;
        case 90:
          { return PHPTokenId.PHP_CASE;
          }
        case 176: break;
        case 38:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 177: break;
        case 41:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 178: break;
        case 8:
          { if(isInConst) {
        isInConst = false;
        parenBalanceInConst = 0;
        bracketBalanceInConst = 0;
    }
    return PHPTokenId.PHP_SEMICOLON;
          }
        case 179: break;
        case 40:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 180: break;
        case 31:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 181: break;
        case 82:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 182: break;
        case 99:
          { return PHPTokenId.PHP_ISSET;
          }
        case 183: break;
        case 137:
          { return PHPTokenId.PHP__FILE__;
          }
        case 184: break;
        case 45:
          { return PHPTokenId.PHP_IF;
          }
        case 185: break;
        case 51:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 186: break;
        case 62:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 187: break;
        case 43:
          { return PHPTokenId.PHP_AS;
          }
        case 188: break;
        case 156:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 189: break;
        case 70:
          { return PHPTokenId.PHP_USE;
          }
        case 190: break;
        case 102:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 191: break;
        case 155:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 192: break;
        case 61:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 193: break;
        case 153:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 194: break;
        case 140:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 195: break;
        case 13:
          { if (isInConst) {
        pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 196: break;
        case 59:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 197: break;
        case 134:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 198: break;
        case 97:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 199: break;
        case 58:
          { // const keyword is also used within group uses. so check "=", otherwise it matches the following:
    // use A\{const CONSTANTA, function myFunction,...}
    popState();
    String match = yytext();
    String[] segments = match.split("[ \n\r\t]+");
    int back = 1;
    if(segments.length > 1) {
        int wsLength = yylength() - 1 - segments[0].length(); // - "=" - {LABEL}
        back +=  wsLength;
    }
    yypushback(back);
    return PHPTokenId.PHP_STRING;
          }
        case 200: break;
        case 34:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 201: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 202: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 203: break;
        case 47:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 204: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 205: break;
        case 71:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 206: break;
        case 125:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 207: break;
        case 127:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 208: break;
        case 105:
          { return PHPTokenId.PHP_CLONE;
          }
        case 209: break;
        case 100:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 210: break;
        case 49:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 211: break;
        case 65:
          { return PHPTokenId.PHP_NEW;
          }
        case 212: break;
        case 76:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 213: break;
        case 57:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 214: break;
        case 19:
          { yypushback(1);
        popState();
          }
        case 215: break;
        case 121:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 216: break;
        case 83:
          { return PHPTokenId.PHP_NULL;
          }
        case 217: break;
        case 91:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 218: break;
        case 111:
          { return PHPTokenId.PHP_WHILE;
          }
        case 219: break;
        case 139:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 220: break;
        case 129:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 221: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 222: break;
        case 150:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 223: break;
        case 92:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 224: break;
        case 28:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 225: break;
        case 115:
          { return PHPTokenId.PHP_STATIC;
          }
        case 226: break;
        case 126:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 227: break;
        case 17:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 228: break;
        case 25:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 229: break;
        case 37:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 230: break;
        case 138:
          { return PHPTokenId.PHP__LINE__;
          }
        case 231: break;
        case 78:
          { return PHPTokenId.PHP_EXIT;
          }
        case 232: break;
        case 35:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 233: break;
        case 39:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 234: break;
        case 96:
          { return PHPTokenId.PHP_BREAK;
          }
        case 235: break;
        case 26:
          { if(parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
        isInConst = false;
    }
    yypushback(1);
    popState();
          }
        case 236: break;
        case 21:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 237: break;
        case 142:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 238: break;
        case 143:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 239: break;
        case 63:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 240: break;
        case 107:
          { return PHPTokenId.PHP_PRINT;
          }
        case 241: break;
        case 69:
          { return PHPTokenId.PHP_VAR;
          }
        case 242: break;
        case 157:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 243: break;
        case 101:
          { return PHPTokenId.PHP_THROW;
          }
        case 244: break;
        case 119:
          { return PHPTokenId.PHP_PARENT;
          }
        case 245: break;
        case 117:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 246: break;
        case 74:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 247: break;
        case 77:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 248: break;
        case 67:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 249: break;
        case 109:
          { return PHPTokenId.PHP_CASTING;
          }
        case 250: break;
        case 42:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 251: break;
        case 33:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 252: break;
        case 66:
          { return PHPTokenId.PHP_DIE;
          }
        case 253: break;
        case 145:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 254: break;
        case 75:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 255: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 256: break;
        case 106:
          { return PHPTokenId.PHP_CLASS;
          }
        case 257: break;
        case 123:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 258: break;
        case 141:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 259: break;
        case 144:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 260: break;
        case 108:
          { return PHPTokenId.PHP_UNSET;
          }
        case 261: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 262: break;
        case 23:
          { yypushback(1);
    popState();
          }
        case 263: break;
        case 120:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 264: break;
        case 152:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 265: break;
        case 146:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 266: break;
        case 116:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 267: break;
        case 80:
          { return PHPTokenId.PHP_EVAL;
          }
        case 268: break;
        case 87:
          { return PHPTokenId.PHP_GOTO;
          }
        case 269: break;
        case 103:
          { isInConst = true;
    parenBalanceInConst = 0;
    bracketBalanceInConst = 0;
    pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    return PHPTokenId.PHP_CONST;
          }
        case 270: break;
        case 20:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 271: break;
        case 133:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 272: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 273: break;
        case 81:
          { return PHPTokenId.PHP_ECHO;
          }
        case 274: break;
        case 95:
          { return PHPTokenId.PHP_FINAL;
          }
        case 275: break;
        case 151:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 276: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 277: break;
        case 110:
          { return PHPTokenId.PHP_YIELD;
          }
        case 278: break;
        case 132:
          { pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
    return PHPTokenId.PHP_FUNCTION;
          }
        case 279: break;
        case 130:
          { return PHPTokenId.PHP__DIR__;
          }
        case 280: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 281: break;
        case 135:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 282: break;
        case 149:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 283: break;
        case 68:
          { return PHPTokenId.PHP_TRY;
          }
        case 284: break;
        case 98:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 285: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 286: break;
        case 114:
          { return PHPTokenId.PHP_RETURN;
          }
        case 287: break;
        case 29:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 288: break;
        case 16:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 289: break;
        case 104:
          { return PHPTokenId.PHP_CATCH;
          }
        case 290: break;
        case 72:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 291: break;
        case 52:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 292: break;
        case 136:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 293: break;
        case 148:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 294: break;
        case 54:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 295: break;
        case 124:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 296: break;
        case 88:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 297: break;
        case 112:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 298: break;
        case 64:
          { return PHPTokenId.PHP_FOR;
          }
        case 299: break;
        case 55:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 300: break;
        case 122:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 301: break;
        case 46:
          { pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 302: break;
        case 24:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 303: break;
        case 79:
          { return PHPTokenId.PHP_ELSE;
          }
        case 304: break;
        case 86:
          { return PHPTokenId.PHP_SELF;
          }
        case 305: break;
        case 56:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 306: break;
        case 48:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 307: break;
        case 14:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 308: break;
        case 44:
          { return PHPTokenId.PHP_DO;
          }
        case 309: break;
        case 53:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 310: break;
        case 89:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 311: break;
        case 131:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 312: break;
        case 113:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 313: break;
        case 84:
          { return PHPTokenId.PHP_TRUE;
          }
        case 314: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 730: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 731: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
