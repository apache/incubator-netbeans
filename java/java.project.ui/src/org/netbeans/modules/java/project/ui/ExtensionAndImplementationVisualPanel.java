/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.java.project.ui;

import java.lang.reflect.Modifier;
import java.util.Set;
import java.util.StringTokenizer;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import org.netbeans.api.java.source.*;
import org.netbeans.api.java.source.ui.TypeElementFinder;
import org.openide.WizardDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/**
 *
 * @author Arthur Sadykov
 */
public class ExtensionAndImplementationVisualPanel extends JPanel implements DocumentListener {

    private static final String SUPERCLASS = "superclass"; // NOI18N
    private static final String INTERFACES = "interfaces"; // NOI18N
    private final ExtensionAndImplementationWizardPanel wizardPanel;

    /**
     * Creates new form ExtensionPanel
     */
    private ExtensionAndImplementationVisualPanel(ExtensionAndImplementationWizardPanel wizardPanel) {
        initComponents();
        this.wizardPanel = wizardPanel;
    }

    public static ExtensionAndImplementationVisualPanel create(ExtensionAndImplementationWizardPanel wizardPanel) {
        ExtensionAndImplementationVisualPanel extensionPanel = new ExtensionAndImplementationVisualPanel(wizardPanel);
        extensionPanel.getSuperclassTextField().getDocument().addDocumentListener(extensionPanel);
        extensionPanel.getInterfacesTextArea().getDocument().addDocumentListener(extensionPanel);
        return extensionPanel;
    }

    private JTextField getSuperclassTextField() {
        return superclassTextField;
    }

    private JTextArea getInterfacesTextArea() {
        return interfacesTextArea;
    }

    String getSuperclass() {
        return superclassTextField.getText();
    }

    String getInterfaces() {
        return interfacesTextArea.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        superclassLabel = new javax.swing.JLabel();
        interfacesLabel = new javax.swing.JLabel();
        superclassTextField = new javax.swing.JTextField();
        browseSuperclassButton = new javax.swing.JButton();
        browseInterfacesButton = new javax.swing.JButton();
        interfacesScrollPane = new javax.swing.JScrollPane();
        interfacesTextArea = new javax.swing.JTextArea();

        superclassLabel.setLabelFor(superclassTextField);
        org.openide.awt.Mnemonics.setLocalizedText(superclassLabel, org.openide.util.NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class, "ExtensionAndImplementationVisualPanel.superclassLabel.text")); // NOI18N

        interfacesLabel.setLabelFor(interfacesTextArea);
        org.openide.awt.Mnemonics.setLocalizedText(interfacesLabel, org.openide.util.NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class, "ExtensionAndImplementationVisualPanel.interfacesLabel.text")); // NOI18N

        superclassTextField.setEditable(false);
        superclassTextField.setText(org.openide.util.NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class, "ExtensionAndImplementationVisualPanel.superclassTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseSuperclassButton, org.openide.util.NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class, "ExtensionAndImplementationVisualPanel.browseSuperclassButton.text")); // NOI18N
        browseSuperclassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSuperclassButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(browseInterfacesButton, org.openide.util.NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class, "ExtensionAndImplementationVisualPanel.browseInterfacesButton.text")); // NOI18N
        browseInterfacesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInterfacesButtonActionPerformed(evt);
            }
        });

        interfacesTextArea.setEditable(false);
        interfacesTextArea.setColumns(20);
        interfacesTextArea.setRows(5);
        interfacesScrollPane.setViewportView(interfacesTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(superclassLabel)
                    .addComponent(interfacesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interfacesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(superclassTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseSuperclassButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(browseInterfacesButton, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superclassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseSuperclassButton)
                    .addComponent(superclassLabel))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interfacesScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(interfacesLabel)
                            .addComponent(browseInterfacesButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseSuperclassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSuperclassButtonActionPerformed
        ElementHandle<TypeElement> handle = TypeElementFinder.find(null, new TypeElementFinder.Customizer() {
            @Override
            public Set<ElementHandle<TypeElement>> query(ClasspathInfo classpathInfo, String textForQuery,
                    ClassIndex.NameKind nameKind, Set<ClassIndex.SearchScope> searchScopes) {
                return classpathInfo.getClassIndex().getDeclaredTypes(textForQuery, nameKind, searchScopes);
            }

            @Override
            public boolean accept(ElementHandle<TypeElement> typeHandle) {
                return isNotFinalClass(typeHandle);
            }
        });
        if (handle != null) {
            String fqn = handle.getQualifiedName();
            superclassTextField.setText(fqn);
        }
    }//GEN-LAST:event_browseSuperclassButtonActionPerformed

    private boolean isNotFinalClass(ElementHandle<TypeElement> typeHandle) {
        boolean isNotFinal = false;
        try {
            Class<?> clazz = Class.forName(typeHandle.getQualifiedName());
            int modifiers = clazz.getModifiers();
            isNotFinal = !Modifier.isFinal(modifiers);
        } catch (ClassNotFoundException ex) {
        }
        return typeHandle.getKind() == ElementKind.CLASS && isNotFinal;
    }

    private void browseInterfacesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInterfacesButtonActionPerformed
        ElementHandle<TypeElement> handle = TypeElementFinder.find(null, new TypeElementFinder.Customizer() {
            @Override
            public Set<ElementHandle<TypeElement>> query(ClasspathInfo classpathInfo, String textForQuery,
                    ClassIndex.NameKind nameKind, Set<ClassIndex.SearchScope> searchScopes) {
                return classpathInfo.getClassIndex().getDeclaredTypes(textForQuery, nameKind, searchScopes);
            }

            @Override
            public boolean accept(ElementHandle<TypeElement> typeHandle) {
                return isInterface(typeHandle);
            }
        });
        if (handle != null) {
            String fqn = handle.getQualifiedName();
            if (interfacesTextArea.getText().isEmpty()) {
                interfacesTextArea.setText(fqn);
            } else {
                String interfaces = interfacesTextArea.getText();
                if (!interfaces.contains(fqn)) {
                    interfacesTextArea.append("\n" + fqn);
                }
            }
        }
    }//GEN-LAST:event_browseInterfacesButtonActionPerformed

    private boolean isInterface(ElementHandle<TypeElement> typeHandle) {
        return typeHandle.getKind() == ElementKind.INTERFACE;
    }

    @NbBundle.Messages({
        "INFO_JavaTargetChooser_ProvideValidSuperclass=Provide valid superclass.",
        "INFO_JavaTargetChooser_ProvideValidInterfaces=Provide valid interfaces."
    })
    boolean isValid(WizardDescriptor wizardDescriptor) {
        if (wizardDescriptor == null) {
            return false;
        }
        String superclass = superclassTextField.getText();
        if (!superclass.isEmpty() && !isValidSuperclass(superclass)) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class,
                            "INFO_JavaTargetChooser_ProvideValidSuperclass"));
            return false;
        }
        String interfaces = interfacesTextArea.getText();
        if (!interfaces.isEmpty() && !isValidInterfaces(interfaces)) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    NbBundle.getMessage(ExtensionAndImplementationVisualPanel.class,
                            "INFO_JavaTargetChooser_ProvideValidInterfaces"));
            return false;
        }
        return true;
    }

    private boolean isValidSuperclass(String superclass) {
        if (!superclass.isEmpty()) {
            if (superclass.charAt(0) == '.' || superclass.charAt(superclass.length() - 1) == '.') {
                return false;
            }
        }
        return hasValidTokens(superclass);
    }

    private boolean hasValidTokens(String fqn) {
        StringTokenizer tokenizer = new StringTokenizer(fqn, ".");
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            if (token.isEmpty()) {
                return false;
            }
            if (!Utilities.isJavaIdentifier(token)) {
                return false;
            }
        }
        return true;
    }

    private boolean isValidInterfaces(String interfaces) {
        if (!interfaces.isEmpty()) {
            if (interfaces.charAt(0) == '.' || interfaces.charAt(interfaces.length() - 1) == '.') {
                return false;
            }
        }
        for (int i = 0; i < interfacesTextArea.getLineCount(); i++) {
            try {
                int lineStartOffset = interfacesTextArea.getLineStartOffset(i);
                int lineEndOffset = interfacesTextArea.getLineEndOffset(i);
                if (lineEndOffset > lineStartOffset) {
                    String implementationClass =
                            interfacesTextArea.getText(lineStartOffset, lineEndOffset - lineStartOffset - 1);
                    if (!hasValidTokens(implementationClass)) {
                        return false;
                    }
                }
            } catch (BadLocationException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        return true;
    }

    void readSettings(WizardDescriptor wizardDescriptor) {
        String superclass = (String) wizardDescriptor.getProperty(SUPERCLASS);
        if (superclass != null) {
            superclassTextField.setText(superclass);
        }
        String interfaces = (String) wizardDescriptor.getProperty(INTERFACES);
        if (interfaces != null) {
            interfacesTextArea.setText(interfaces);
        }
    }

    void storeSettings(WizardDescriptor wizardDescriptor) {
        String superclass = superclassTextField.getText();
        String interfaces = interfacesTextArea.getText();
        wizardDescriptor.putProperty(SUPERCLASS, superclass);
        wizardDescriptor.putProperty(INTERFACES, interfaces);
    }

    @Override
    public void insertUpdate(DocumentEvent event) {
        wizardPanel.fireChangeEvent();
    }

    @Override
    public void removeUpdate(DocumentEvent event) {
        wizardPanel.fireChangeEvent();
    }

    @Override
    public void changedUpdate(DocumentEvent event) {
        wizardPanel.fireChangeEvent();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseInterfacesButton;
    private javax.swing.JButton browseSuperclassButton;
    private javax.swing.JLabel interfacesLabel;
    private javax.swing.JScrollPane interfacesScrollPane;
    private javax.swing.JTextArea interfacesTextArea;
    private javax.swing.JLabel superclassLabel;
    private javax.swing.JTextField superclassTextField;
    // End of variables declaration//GEN-END:variables
}
