/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.java.hints.bugs;

import java.awt.Component;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.prefs.Preferences;
import java.util.stream.IntStream;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import org.netbeans.api.annotations.common.NonNull;
import org.netbeans.api.annotations.common.NullAllowed;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

public class NPECheckPanel extends JPanel {

    private final @NonNull Preferences prefs;
    private final @NonNull TableModel nullabilityOfFieldsTableModel;

    /**
     * Creates new form NPECheckPanel
     */
    public NPECheckPanel(@NonNull Preferences prefs) {
        this.prefs = prefs;

        nullabilityOfFieldsTableModel = createNullabilityOfFieldsTableModel();
        initComponents();
        nullabilityOfFieldsTable.setAutoCreateRowSorter(true);
        nullabilityOfFieldsTable.getRowSorter().setSortKeys(Collections.singletonList(new SortKey(0, SortOrder.ASCENDING)));
        nullabilityOfFieldsTable.getTableHeader().setReorderingAllowed(false);
        nullabilityOfFieldsTable.setDefaultRenderer(NPECheck.State.class, new NullabilityCellRenderer());
        nullabilityOfFieldsTable.setDefaultEditor(String.class, new DefaultCellEditor(new JTextField()) {
            {
                setClickCountToStart(2);
            }
        });
        nullabilityOfFieldsTable.setDefaultEditor(NPECheck.State.class, new NullabilityCellEditor());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enabledForFieldsCheckBox = new javax.swing.JCheckBox();
        unboxingUnknownValuesCheckBox = new javax.swing.JCheckBox();
        nullabilityOfFieldsLabel = new javax.swing.JLabel();
        nullabilityOfFieldsScrollPane = new javax.swing.JScrollPane();
        nullabilityOfFieldsTable = new javax.swing.JTable();
        addNullabilityOfFieldsEntryButton = new javax.swing.JButton();
        removeNullabilityOfFieldsEntryButton = new javax.swing.JButton();

        enabledForFieldsCheckBox.setSelected(NPECheck.getEnabledForFieldsPreference(prefs));
        org.openide.awt.Mnemonics.setLocalizedText(enabledForFieldsCheckBox, org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "LBL_NPECheck.ENABLE_FOR_FIELDS")); // NOI18N
        enabledForFieldsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "TP_NPECheck.ENABLE_FOR_FIELDS")); // NOI18N
        enabledForFieldsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledForFieldsCheckBoxActionPerformed(evt);
            }
        });

        unboxingUnknownValuesCheckBox.setSelected(NPECheck.getUnboxingUnknownValuesPreference(prefs));
        org.openide.awt.Mnemonics.setLocalizedText(unboxingUnknownValuesCheckBox, org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "LBL_NPECheck.UNBOXING_UNKNOWN_VALUES")); // NOI18N
        unboxingUnknownValuesCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "TP_NPECheck.UNBOXING_UNKNOWN_VALUES")); // NOI18N
        unboxingUnknownValuesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unboxingUnknownValuesCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(nullabilityOfFieldsLabel, org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "NPECheckPanel.nullabilityOfFieldsLabel.text")); // NOI18N

        nullabilityOfFieldsTable.setModel(nullabilityOfFieldsTableModel);
        nullabilityOfFieldsTable.setColumnSelectionAllowed(true);
        nullabilityOfFieldsScrollPane.setViewportView(nullabilityOfFieldsTable);
        nullabilityOfFieldsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        org.openide.awt.Mnemonics.setLocalizedText(addNullabilityOfFieldsEntryButton, org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "NPECheckPanel.addNullabilityOfFieldsEntryButton.text")); // NOI18N
        addNullabilityOfFieldsEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNullabilityOfFieldsEntryButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeNullabilityOfFieldsEntryButton, org.openide.util.NbBundle.getMessage(NPECheckPanel.class, "NPECheckPanel.removeNullabilityOfFieldsEntryButton.text")); // NOI18N
        removeNullabilityOfFieldsEntryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeNullabilityOfFieldsEntryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nullabilityOfFieldsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addNullabilityOfFieldsEntryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeNullabilityOfFieldsEntryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
            .addComponent(nullabilityOfFieldsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(unboxingUnknownValuesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(enabledForFieldsCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enabledForFieldsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unboxingUnknownValuesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nullabilityOfFieldsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNullabilityOfFieldsEntryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeNullabilityOfFieldsEntryButton)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addComponent(nullabilityOfFieldsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enabledForFieldsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledForFieldsCheckBoxActionPerformed
        NPECheck.setEnabledForFieldsPreference(prefs, enabledForFieldsCheckBox.isSelected());
    }//GEN-LAST:event_enabledForFieldsCheckBoxActionPerformed

    private void unboxingUnknownValuesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unboxingUnknownValuesCheckBoxActionPerformed
        NPECheck.setUnboxingUnknownValuesPreference(prefs, unboxingUnknownValuesCheckBox.isSelected());
    }//GEN-LAST:event_unboxingUnknownValuesCheckBoxActionPerformed

    private void addNullabilityOfFieldsEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNullabilityOfFieldsEntryButtonActionPerformed
        ((DefaultTableModel) nullabilityOfFieldsTable.getModel()).addRow(new Object[] { "", NPECheck.State.NOT_NULL }); // NOI18N
        final int rowIndex = nullabilityOfFieldsTable.getRowCount() - 1;
        nullabilityOfFieldsTable.getSelectionModel().setSelectionInterval(rowIndex, rowIndex);
        nullabilityOfFieldsTable.requestFocusInWindow();
        nullabilityOfFieldsTable.editCellAt(
                nullabilityOfFieldsTable.convertRowIndexToModel(rowIndex),
                nullabilityOfFieldsTable.convertColumnIndexToModel(0));
    }//GEN-LAST:event_addNullabilityOfFieldsEntryButtonActionPerformed

    private void removeNullabilityOfFieldsEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNullabilityOfFieldsEntryButtonActionPerformed
        int[] selectedRows = nullabilityOfFieldsTable.getSelectedRows();
        if (selectedRows != null && selectedRows.length > 0) {
            TableCellEditor cellEditor = nullabilityOfFieldsTable.getCellEditor();
            if (cellEditor != null) {
                cellEditor.stopCellEditing();
            }
            DefaultTableModel model = (DefaultTableModel) nullabilityOfFieldsTable.getModel();
            IntStream.of(selectedRows)
                    .map(nullabilityOfFieldsTable::convertRowIndexToModel)
                    .distinct()
                    .boxed()
                    .sorted(Collections.reverseOrder())
                    .forEachOrdered(model::removeRow);
            nullabilityOfFieldsTable.clearSelection();
        }
    }//GEN-LAST:event_removeNullabilityOfFieldsEntryButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNullabilityOfFieldsEntryButton;
    private javax.swing.JCheckBox enabledForFieldsCheckBox;
    private javax.swing.JLabel nullabilityOfFieldsLabel;
    private javax.swing.JScrollPane nullabilityOfFieldsScrollPane;
    private javax.swing.JTable nullabilityOfFieldsTable;
    private javax.swing.JButton removeNullabilityOfFieldsEntryButton;
    private javax.swing.JCheckBox unboxingUnknownValuesCheckBox;
    // End of variables declaration//GEN-END:variables

    private Object[][] getNullabilityOfFieldsTableData() {
        Map<String, NPECheck.State> m = NPECheck.getNullabilityOfFieldsPreference(prefs);
        return m.entrySet().stream()
                .map((e) -> new Object[] { e.getKey(), e.getValue() })
                .toArray(Object[][]::new);
    }

    private String[] getNullabilityOfFieldsTableColumnNames() {
        return new String[] {
            NbBundle.getMessage(NPECheckPanel.class, "NPECheckPanel.nullabilityOfFieldsTable.columnModel.title0"), // NOI18N
            NbBundle.getMessage(NPECheckPanel.class, "NPECheckPanel.nullabilityOfFieldsTable.columnModel.title1"), // NOI18N
        };
    }

    private DefaultTableModel createNullabilityOfFieldsTableModel() {
        Object[][] data = getNullabilityOfFieldsTableData();
        String[] columnNames = getNullabilityOfFieldsTableColumnNames();
        DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 0 ? String.class : NPECheck.State.class;
            }
        };
        model.addTableModelListener((TableModelEvent evt) -> {
            final int numRows = model.getRowCount();
            Map<String, NPECheck.State> m = new LinkedHashMap<>(numRows);
            for (int r = 0; r < numRows; ++r) {
                String fullyQualifiedFieldName = (String) model.getValueAt(r, 0);
                NPECheck.State state = (NPECheck.State) model.getValueAt(r, 1);
                // If a fully qualified field name is listed twice, but with
                // different (conflicting) states, then we shouldn't save
                // the FQN in preferences.
                if (m.containsKey(fullyQualifiedFieldName)) {
                    if (state != m.get(fullyQualifiedFieldName)) {
                        state = null;
                    }
                }
                m.put(fullyQualifiedFieldName, state);
            }
            NPECheck.setNullabilityOfFieldsPreference(prefs, m);
        });
        return model;
    }

    private static String getStateText(@NullAllowed NPECheck.State state) {
        if (state != null) {
            String key = null;
            switch (state) {
                case NULL:
                case NULL_HYPOTHETICAL:
                    key = "NPECheckPanel.nullabilityYes"; // NOI18N
                    break;
                case NOT_NULL:
                case NOT_NULL_HYPOTHETICAL:
                    key = "NPECheckPanel.nullabilityNo"; // NOI18N
                    break;
                case POSSIBLE_NULL:
                case POSSIBLE_NULL_REPORT:
                    key = "NPECheckPanel.nullabilityMaybe"; // NOI18N
                    break;
            }
            if (key != null) {
                return NbBundle.getMessage(NPECheckPanel.class, key);
            }
        }
        return ""; // NOI18N
    }

    private static class NullabilityCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText(getStateText((NPECheck.State) value));
            setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
            return this;
        }
    }

    private static class NullabilityCellEditor extends DefaultCellEditor {

        private static JComboBox<NPECheck.State> createComboBox() {
            JComboBox<NPECheck.State> comboBox = new JComboBox<>();
            comboBox.addItem(NPECheck.State.NULL);
            comboBox.addItem(NPECheck.State.NOT_NULL);
            comboBox.addItem(NPECheck.State.POSSIBLE_NULL_REPORT);
            comboBox.setRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                    setText(getStateText((NPECheck.State) value));
                    setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
                    return this;
                }
            });
            return comboBox;
        }

        public NullabilityCellEditor() {
            super(createComboBox());
            super.setClickCountToStart(2);
        }
    }
}
